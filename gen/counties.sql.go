// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: counties.sql

package gen

import (
	"context"
)

const duplicateCounties = `-- name: DuplicateCounties :one
SELECT COUNT(*) FROM counties WHERE name=$1
`

func (q *Queries) DuplicateCounties(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, duplicateCounties, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertCounties = `-- name: InsertCounties :exec

INSERT INTO counties (name) VALUES($1)
`

// counties.sql
func (q *Queries) InsertCounties(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, insertCounties, name)
	return err
}

const viewCounties = `-- name: ViewCounties :many
SELECT id, name FROM counties
`

func (q *Queries) ViewCounties(ctx context.Context) ([]County, error) {
	rows, err := q.db.QueryContext(ctx, viewCounties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []County{}
	for rows.Next() {
		var i County
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
