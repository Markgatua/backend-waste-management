// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: notifications.sql

package gen

import (
	"context"
	"database/sql"
)

const getMyNotifications = `-- name: GetMyNotifications :many

SELECT id, user_id, subject, message, status, created_at FROM notifications WHERE user_id = $1
`

func (q *Queries) GetMyNotifications(ctx context.Context, userID int32) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getMyNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Subject,
			&i.Message,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNewNotificationRequest = `-- name: InsertNewNotificationRequest :exec

insert into notifications( user_id,subject,message ) values ($1, $2, $3) returning id, user_id, subject, message, status, created_at
`

type InsertNewNotificationRequestParams struct {
	UserID  int32  `json:"user_id"`
	Subject string `json:"subject"`
	Message string `json:"message"`
}

// notifications.sql
func (q *Queries) InsertNewNotificationRequest(ctx context.Context, arg InsertNewNotificationRequestParams) error {
	_, err := q.db.ExecContext(ctx, insertNewNotificationRequest, arg.UserID, arg.Subject, arg.Message)
	return err
}

const updateNotificationStatus = `-- name: UpdateNotificationStatus :exec

update notifications set status=$2 where id=$1
`

type UpdateNotificationStatusParams struct {
	ID     int32        `json:"id"`
	Status sql.NullBool `json:"status"`
}

func (q *Queries) UpdateNotificationStatus(ctx context.Context, arg UpdateNotificationStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateNotificationStatus, arg.ID, arg.Status)
	return err
}
