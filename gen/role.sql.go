// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role.sql

package gen

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const activateRole = `-- name: ActivateRole :exec
update roles set is_active = true where id = $1
`

func (q *Queries) ActivateRole(ctx context.Context, roleID int32) error {
	_, err := q.db.ExecContext(ctx, activateRole, roleID)
	return err
}

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
insert into role_has_permissions(role_id, permission_id) VALUES ($1,$2)
`

type AssignPermissionToRoleParams struct {
	RoleID       int32 `json:"role_id"`
	PermissionID int32 `json:"permission_id"`
}

func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (id,name,guard_name,description,is_active) VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    ) ON CONFLICT(id) do update set name=EXCLUDED.name,guard_name=EXCLUDED.guard_name,description=EXCLUDED.description,is_active=EXCLUDED.is_active returning id, name, guard_name, created_at, updated_at, description, is_active
`

type CreateRoleParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	GuardName   string         `json:"guard_name"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole,
		arg.ID,
		arg.Name,
		arg.GuardName,
		arg.Description,
		arg.IsActive,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GuardName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}

const deactivateRole = `-- name: DeactivateRole :exec
update roles set is_active = false where id = $1
`

func (q *Queries) DeactivateRole(ctx context.Context, roleID int32) error {
	_, err := q.db.ExecContext(ctx, deactivateRole, roleID)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
delete from roles where id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
select id, name, guard_name, created_at, updated_at, description, is_active from roles where id=$1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GuardName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
select id, name, guard_name, created_at, updated_at, description, is_active from roles where id !=12
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GuardName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionsFromRole = `-- name: RemovePermissionsFromRole :exec
delete from role_has_permissions where permission_id = ANY($1:: int []) and role_id=$2
`

type RemovePermissionsFromRoleParams struct {
	PermissionIds []int32 `json:"permission_ids"`
	RoleID        int32   `json:"role_id"`
}

func (q *Queries) RemovePermissionsFromRole(ctx context.Context, arg RemovePermissionsFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removePermissionsFromRole, pq.Array(arg.PermissionIds), arg.RoleID)
	return err
}

const roleExists = `-- name: RoleExists :one
SELECT count(*) FROM roles where name = $1
`

func (q *Queries) RoleExists(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, roleExists, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateRole = `-- name: UpdateRole :exec
update roles set name = $1, is_active =$2,description = $3 where id = $4
`

type UpdateRoleParams struct {
	Name        string         `json:"name"`
	IsActive    bool           `json:"is_active"`
	Description sql.NullString `json:"description"`
	RoleID      int32          `json:"role_id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole,
		arg.Name,
		arg.IsActive,
		arg.Description,
		arg.RoleID,
	)
	return err
}
