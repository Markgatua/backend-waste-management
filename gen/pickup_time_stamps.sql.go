// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: pickup_time_stamps.sql

package gen

import (
	"context"
)

const duplicatePickupTimeStamp = `-- name: DuplicatePickupTimeStamp :one
SELECT COUNT(*) FROM pickup_time_stamps WHERE stamp=$1
`

func (q *Queries) DuplicatePickupTimeStamp(ctx context.Context, stamp string) (int64, error) {
	row := q.db.QueryRowContext(ctx, duplicatePickupTimeStamp, stamp)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPickupTimeStamps = `-- name: GetPickupTimeStamps :many

select id, stamp, time_range from pickup_time_stamps
`

func (q *Queries) GetPickupTimeStamps(ctx context.Context) ([]PickupTimeStamp, error) {
	rows, err := q.db.QueryContext(ctx, getPickupTimeStamps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PickupTimeStamp{}
	for rows.Next() {
		var i PickupTimeStamp
		if err := rows.Scan(&i.ID, &i.Stamp, &i.TimeRange); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPickupTimeStsmp = `-- name: InsertPickupTimeStsmp :exec

insert into pickup_time_stamps( id, stamp,time_range ) values (
        $1,
        $2,
        $3
    ) ON CONFLICT(id) do update set stamp=EXCLUDED.stamp,time_range=EXCLUDED.time_range returning id, stamp, time_range
`

type InsertPickupTimeStsmpParams struct {
	ID        int32  `json:"id"`
	Stamp     string `json:"stamp"`
	TimeRange string `json:"time_range"`
}

// pickup_time_stamps.sql
func (q *Queries) InsertPickupTimeStsmp(ctx context.Context, arg InsertPickupTimeStsmpParams) error {
	_, err := q.db.ExecContext(ctx, insertPickupTimeStsmp, arg.ID, arg.Stamp, arg.TimeRange)
	return err
}

const updatePickupTimeStamp = `-- name: UpdatePickupTimeStamp :exec
update pickup_time_stamps
set
    stamp = $1,
    time_range = $2
where
    id = $3
`

type UpdatePickupTimeStampParams struct {
	Stamp     string `json:"stamp"`
	TimeRange string `json:"time_range"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdatePickupTimeStamp(ctx context.Context, arg UpdatePickupTimeStampParams) error {
	_, err := q.db.ExecContext(ctx, updatePickupTimeStamp, arg.Stamp, arg.TimeRange, arg.ID)
	return err
}
