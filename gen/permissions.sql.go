// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: permissions.sql

package gen

import (
	"context"
	"database/sql"
)

const createPermission = `-- name: CreatePermission :exec
INSERT INTO
    permissions (
        name,
        guard_name,
        module,
        submodule
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    )
`

type CreatePermissionParams struct {
	Name      string         `json:"name"`
	GuardName string         `json:"guard_name"`
	Module    string         `json:"module"`
	Submodule sql.NullString `json:"submodule"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) error {
	_, err := q.db.ExecContext(ctx, createPermission,
		arg.Name,
		arg.GuardName,
		arg.Module,
		arg.Submodule,
	)
	return err
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name, guard_name, created_at, updated_at, module, submodule FROM permissions
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GuardName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Module,
			&i.Submodule,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
