// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: permissions.sql

package gen

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO
    permissions (
        name,
        action,
        module,
        submodule
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    ) RETURNING id, name, action, created_at, updated_at, module, submodule
`

type CreatePermissionParams struct {
	Name      string         `json:"name"`
	Action    string         `json:"action"`
	Module    string         `json:"module"`
	Submodule sql.NullString `json:"submodule"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission,
		arg.Name,
		arg.Action,
		arg.Module,
		arg.Submodule,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Action,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Module,
		&i.Submodule,
	)
	return i, err
}

const deletePermissionByActions = `-- name: DeletePermissionByActions :exec
delete from permissions where not (action = ANY($1::varchar[]))
`

func (q *Queries) DeletePermissionByActions(ctx context.Context, actions []string) error {
	_, err := q.db.ExecContext(ctx, deletePermissionByActions, pq.Array(actions))
	return err
}

const deletePermissionByIds = `-- name: DeletePermissionByIds :exec
delete from permissions where not (id = ANY($1::int[]))
`

func (q *Queries) DeletePermissionByIds(ctx context.Context, permissionIds []int32) error {
	_, err := q.db.ExecContext(ctx, deletePermissionByIds, pq.Array(permissionIds))
	return err
}

const getAllPermissionGroupedByModule = `-- name: GetAllPermissionGroupedByModule :many
SELECT id, name, action, created_at, updated_at, module, submodule FROM permissions GROUP BY id,module
`

func (q *Queries) GetAllPermissionGroupedByModule(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getAllPermissionGroupedByModule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Action,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Module,
			&i.Submodule,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name, action, created_at, updated_at, module, submodule FROM permissions
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Action,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Module,
			&i.Submodule,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsForRoleID = `-- name: GetPermissionsForRoleID :many
select
    permissions.id as permission_id,
    permissions.name,
    permissions.name,
    permissions.action
from role_has_permissions
    inner join permissions on permissions.id = role_has_permissions.permission_id
    where role_has_permissions.role_id=$1
`

type GetPermissionsForRoleIDRow struct {
	PermissionID int32  `json:"permission_id"`
	Name         string `json:"name"`
	Name_2       string `json:"name_2"`
	Action       string `json:"action"`
}

func (q *Queries) GetPermissionsForRoleID(ctx context.Context, roleID int32) ([]GetPermissionsForRoleIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsForRoleID, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPermissionsForRoleIDRow{}
	for rows.Next() {
		var i GetPermissionsForRoleIDRow
		if err := rows.Scan(
			&i.PermissionID,
			&i.Name,
			&i.Name_2,
			&i.Action,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
