// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: country.sql

package gen

import (
	"context"
	"database/sql"
)

const createCountry = `-- name: CreateCountry :exec
INSERT INTO
    countries (
        name,
        currency_code,
        capital,
        citizenship,
        country_code,
        currency,
        currency_sub_unit,
        currency_symbol,
        currency_decimals,
        full_name,
        iso_3166_2,
        iso_3166_3,
        region_code,
        sub_region_code,
        eea,
        calling_code,
        flag
    )
VALUES
(
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17
    )
`

type CreateCountryParams struct {
	Name             string         `json:"name"`
	CurrencyCode     sql.NullString `json:"currency_code"`
	Capital          sql.NullString `json:"capital"`
	Citizenship      string         `json:"citizenship"`
	CountryCode      string         `json:"country_code"`
	Currency         sql.NullString `json:"currency"`
	CurrencySubUnit  sql.NullString `json:"currency_sub_unit"`
	CurrencySymbol   sql.NullString `json:"currency_symbol"`
	CurrencyDecimals sql.NullInt16  `json:"currency_decimals"`
	FullName         sql.NullString `json:"full_name"`
	Iso31662         string         `json:"iso_3166_2"`
	Iso31663         string         `json:"iso_3166_3"`
	RegionCode       string         `json:"region_code"`
	SubRegionCode    string         `json:"sub_region_code"`
	Eea              sql.NullInt16  `json:"eea"`
	CallingCode      sql.NullString `json:"calling_code"`
	Flag             sql.NullString `json:"flag"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) error {
	_, err := q.db.ExecContext(ctx, createCountry,
		arg.Name,
		arg.CurrencyCode,
		arg.Capital,
		arg.Citizenship,
		arg.CountryCode,
		arg.Currency,
		arg.CurrencySubUnit,
		arg.CurrencySymbol,
		arg.CurrencyDecimals,
		arg.FullName,
		arg.Iso31662,
		arg.Iso31663,
		arg.RegionCode,
		arg.SubRegionCode,
		arg.Eea,
		arg.CallingCode,
		arg.Flag,
	)
	return err
}

const getAllCountries = `-- name: GetAllCountries :many
select id, name, currency_code, capital, citizenship, country_code, currency, currency_sub_unit, currency_symbol, currency_decimals, full_name, iso_3166_2, iso_3166_3, region_code, sub_region_code, eea, calling_code, flag from countries
`

func (q *Queries) GetAllCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getAllCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Country{}
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CurrencyCode,
			&i.Capital,
			&i.Citizenship,
			&i.CountryCode,
			&i.Currency,
			&i.CurrencySubUnit,
			&i.CurrencySymbol,
			&i.CurrencyDecimals,
			&i.FullName,
			&i.Iso31662,
			&i.Iso31663,
			&i.RegionCode,
			&i.SubRegionCode,
			&i.Eea,
			&i.CallingCode,
			&i.Flag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryBeCountryCode = `-- name: GetCountryBeCountryCode :many
SELECT id, name, currency_code, capital, citizenship, country_code, currency, currency_sub_unit, currency_symbol, currency_decimals, full_name, iso_3166_2, iso_3166_3, region_code, sub_region_code, eea, calling_code, flag FROM countries WHERE country_code = $1
`

func (q *Queries) GetCountryBeCountryCode(ctx context.Context, countryCode string) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getCountryBeCountryCode, countryCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Country{}
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CurrencyCode,
			&i.Capital,
			&i.Citizenship,
			&i.CountryCode,
			&i.Currency,
			&i.CurrencySubUnit,
			&i.CurrencySymbol,
			&i.CurrencyDecimals,
			&i.FullName,
			&i.Iso31662,
			&i.Iso31663,
			&i.RegionCode,
			&i.SubRegionCode,
			&i.Eea,
			&i.CallingCode,
			&i.Flag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryByName = `-- name: GetCountryByName :one
select id, name, currency_code, capital, citizenship, country_code, currency, currency_sub_unit, currency_symbol, currency_decimals, full_name, iso_3166_2, iso_3166_3, region_code, sub_region_code, eea, calling_code, flag from countries where name ilike $1
`

func (q *Queries) GetCountryByName(ctx context.Context, country string) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountryByName, country)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CurrencyCode,
		&i.Capital,
		&i.Citizenship,
		&i.CountryCode,
		&i.Currency,
		&i.CurrencySubUnit,
		&i.CurrencySymbol,
		&i.CurrencyDecimals,
		&i.FullName,
		&i.Iso31662,
		&i.Iso31663,
		&i.RegionCode,
		&i.SubRegionCode,
		&i.Eea,
		&i.CallingCode,
		&i.Flag,
	)
	return i, err
}
