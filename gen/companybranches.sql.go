// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: companybranches.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const getAllBranches = `-- name: GetAllBranches :many

SELECT company_branches.id, company_branches.company_id, company_branches.region_id, company_branches.branch, company_branches.branch_location, company_branches.is_active, company_branches.created_at, companies.name, company_regionals.region
FROM company_branches
JOIN companies ON companies.id = company_branches.company_id
LEFT JOIN company_regionals ON company_regionals.id = company_branches.region_id
`

type GetAllBranchesRow struct {
	ID             int32          `json:"id"`
	CompanyID      int32          `json:"company_id"`
	RegionID       sql.NullInt32  `json:"region_id"`
	Branch         string         `json:"branch"`
	BranchLocation string         `json:"branch_location"`
	IsActive       bool           `json:"is_active"`
	CreatedAt      time.Time      `json:"created_at"`
	Name           string         `json:"name"`
	Region         sql.NullString `json:"region"`
}

// company_branches.sql
func (q *Queries) GetAllBranches(ctx context.Context) ([]GetAllBranchesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllBranches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllBranchesRow{}
	for rows.Next() {
		var i GetAllBranchesRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.RegionID,
			&i.Branch,
			&i.BranchLocation,
			&i.IsActive,
			&i.CreatedAt,
			&i.Name,
			&i.Region,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCompanyBranches = `-- name: GetAllCompanyBranches :many
SELECT company_branches.id, company_branches.company_id, company_branches.region_id, company_branches.branch, company_branches.branch_location, company_branches.is_active, company_branches.created_at, companies.name, company_regionals.region
FROM company_branches
JOIN companies ON companies.id = company_branches.company_id
LEFT JOIN company_regionals ON company_regionals.id = company_branches.region_id
WHERE company_branches.company_id = $1
`

type GetAllCompanyBranchesRow struct {
	ID             int32          `json:"id"`
	CompanyID      int32          `json:"company_id"`
	RegionID       sql.NullInt32  `json:"region_id"`
	Branch         string         `json:"branch"`
	BranchLocation string         `json:"branch_location"`
	IsActive       bool           `json:"is_active"`
	CreatedAt      time.Time      `json:"created_at"`
	Name           string         `json:"name"`
	Region         sql.NullString `json:"region"`
}

func (q *Queries) GetAllCompanyBranches(ctx context.Context, companyID int32) ([]GetAllCompanyBranchesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllCompanyBranches, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllCompanyBranchesRow{}
	for rows.Next() {
		var i GetAllCompanyBranchesRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.RegionID,
			&i.Branch,
			&i.BranchLocation,
			&i.IsActive,
			&i.CreatedAt,
			&i.Name,
			&i.Region,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranchesForARegion = `-- name: GetBranchesForARegion :many
SELECT company_branches.id, company_branches.company_id, company_branches.region_id, company_branches.branch, company_branches.branch_location, company_branches.is_active, company_branches.created_at, companies.name, company_regionals.region
FROM company_branches
JOIN companies ON companies.id = company_branches.company_id
JOIN company_regionals ON company_regionals.id = company_branches.region_id
WHERE company_branches.region_id = $1
`

type GetBranchesForARegionRow struct {
	ID             int32         `json:"id"`
	CompanyID      int32         `json:"company_id"`
	RegionID       sql.NullInt32 `json:"region_id"`
	Branch         string        `json:"branch"`
	BranchLocation string        `json:"branch_location"`
	IsActive       bool          `json:"is_active"`
	CreatedAt      time.Time     `json:"created_at"`
	Name           string        `json:"name"`
	Region         string        `json:"region"`
}

func (q *Queries) GetBranchesForARegion(ctx context.Context, regionID sql.NullInt32) ([]GetBranchesForARegionRow, error) {
	rows, err := q.db.QueryContext(ctx, getBranchesForARegion, regionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBranchesForARegionRow{}
	for rows.Next() {
		var i GetBranchesForARegionRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.RegionID,
			&i.Branch,
			&i.BranchLocation,
			&i.IsActive,
			&i.CreatedAt,
			&i.Name,
			&i.Region,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneCompanyBranch = `-- name: GetOneCompanyBranch :one
SELECT company_branches.id, company_branches.company_id, company_branches.region_id, company_branches.branch, company_branches.branch_location, company_branches.is_active, company_branches.created_at, companies.name, company_regionals.region
FROM company_branches
JOIN companies ON companies.id = company_branches.company_id
JOIN company_regionals ON company_regionals.id = company_branches.region_id
WHERE company_branches.id = $1
`

type GetOneCompanyBranchRow struct {
	ID             int32         `json:"id"`
	CompanyID      int32         `json:"company_id"`
	RegionID       sql.NullInt32 `json:"region_id"`
	Branch         string        `json:"branch"`
	BranchLocation string        `json:"branch_location"`
	IsActive       bool          `json:"is_active"`
	CreatedAt      time.Time     `json:"created_at"`
	Name           string        `json:"name"`
	Region         string        `json:"region"`
}

func (q *Queries) GetOneCompanyBranch(ctx context.Context, id int32) (GetOneCompanyBranchRow, error) {
	row := q.db.QueryRowContext(ctx, getOneCompanyBranch, id)
	var i GetOneCompanyBranchRow
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.RegionID,
		&i.Branch,
		&i.BranchLocation,
		&i.IsActive,
		&i.CreatedAt,
		&i.Name,
		&i.Region,
	)
	return i, err
}

const insertCompanyBranch = `-- name: InsertCompanyBranch :one
INSERT INTO company_branches (company_id, region_id, branch, branch_location) VALUES ($1, $2, $3, $4) RETURNING id, company_id, region_id, branch, branch_location, is_active, created_at
`

type InsertCompanyBranchParams struct {
	CompanyID      int32         `json:"company_id"`
	RegionID       sql.NullInt32 `json:"region_id"`
	Branch         string        `json:"branch"`
	BranchLocation string        `json:"branch_location"`
}

func (q *Queries) InsertCompanyBranch(ctx context.Context, arg InsertCompanyBranchParams) (CompanyBranch, error) {
	row := q.db.QueryRowContext(ctx, insertCompanyBranch,
		arg.CompanyID,
		arg.RegionID,
		arg.Branch,
		arg.BranchLocation,
	)
	var i CompanyBranch
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.RegionID,
		&i.Branch,
		&i.BranchLocation,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateCompanyBranchData = `-- name: UpdateCompanyBranchData :exec
update company_branches set branch=$2,branch_location=$3,region_id=$4 where id=$1
`

type UpdateCompanyBranchDataParams struct {
	ID             int32         `json:"id"`
	Branch         string        `json:"branch"`
	BranchLocation string        `json:"branch_location"`
	RegionID       sql.NullInt32 `json:"region_id"`
}

func (q *Queries) UpdateCompanyBranchData(ctx context.Context, arg UpdateCompanyBranchDataParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyBranchData,
		arg.ID,
		arg.Branch,
		arg.BranchLocation,
		arg.RegionID,
	)
	return err
}

const updateCompanyBranchStatus = `-- name: UpdateCompanyBranchStatus :exec
update company_branches set is_active=$2 where id=$1
`

type UpdateCompanyBranchStatusParams struct {
	ID       int32 `json:"id"`
	IsActive bool  `json:"is_active"`
}

func (q *Queries) UpdateCompanyBranchStatus(ctx context.Context, arg UpdateCompanyBranchStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyBranchStatus, arg.ID, arg.IsActive)
	return err
}
