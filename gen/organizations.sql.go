// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: organizations.sql

package gen

import (
	"context"
	"database/sql"
)

const deleteOrganization = `-- name: DeleteOrganization :exec
delete from organizations where id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrganization, id)
	return err
}

const getAllOrganizations = `-- name: GetAllOrganizations :many

SELECT organizations.id, organizations.name, organizations.country_id, organizations.is_active, organizations.organization_type,uploads.path as file_path,users.first_name,users.id as user_id,users.last_name,users.email, countries.name as country from organizations 
left join countries on countries.id=organizations.country_id
left join users on users.user_organization_id = organizations.id and users.is_organization_super_admin=true
left join uploads on uploads.item_id=organizations.id and uploads.related_table='organizations'
`

type GetAllOrganizationsRow struct {
	ID               int32          `json:"id"`
	Name             string         `json:"name"`
	CountryID        int32          `json:"country_id"`
	IsActive         bool           `json:"is_active"`
	OrganizationType int32          `json:"organization_type"`
	FilePath         sql.NullString `json:"file_path"`
	FirstName        sql.NullString `json:"first_name"`
	UserID           sql.NullInt32  `json:"user_id"`
	LastName         sql.NullString `json:"last_name"`
	Email            sql.NullString `json:"email"`
	Country          sql.NullString `json:"country"`
}

// regions.sql
func (q *Queries) GetAllOrganizations(ctx context.Context) ([]GetAllOrganizationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllOrganizationsRow{}
	for rows.Next() {
		var i GetAllOrganizationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CountryID,
			&i.IsActive,
			&i.OrganizationType,
			&i.FilePath,
			&i.FirstName,
			&i.UserID,
			&i.LastName,
			&i.Email,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDuplicateOrganization = `-- name: GetDuplicateOrganization :many
SELECT id, name, country_id, is_active, organization_type
FROM organizations
where
    id != $1
    and LOWER(name) = $2
    and country_id = $3
`

type GetDuplicateOrganizationParams struct {
	ID        int32  `json:"id"`
	Name      string `json:"name"`
	CountryID int32  `json:"country_id"`
}

func (q *Queries) GetDuplicateOrganization(ctx context.Context, arg GetDuplicateOrganizationParams) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getDuplicateOrganization, arg.ID, arg.Name, arg.CountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CountryID,
			&i.IsActive,
			&i.OrganizationType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganization = `-- name: GetOrganization :one
SELECT organizations.id, organizations.name, organizations.country_id, organizations.is_active, organizations.organization_type,countries.name as country FROM organizations left join countries on countries.id=organizations.country_id WHERE organizations.id = $1
`

type GetOrganizationRow struct {
	ID               int32          `json:"id"`
	Name             string         `json:"name"`
	CountryID        int32          `json:"country_id"`
	IsActive         bool           `json:"is_active"`
	OrganizationType int32          `json:"organization_type"`
	Country          sql.NullString `json:"country"`
}

func (q *Queries) GetOrganization(ctx context.Context, id int32) (GetOrganizationRow, error) {
	row := q.db.QueryRowContext(ctx, getOrganization, id)
	var i GetOrganizationRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CountryID,
		&i.IsActive,
		&i.OrganizationType,
		&i.Country,
	)
	return i, err
}

const getOrganizationCountWithNameAndCountry = `-- name: GetOrganizationCountWithNameAndCountry :many
SELECT id, name, country_id, is_active, organization_type
from organizations
where
    LOWER(name) = $1
    and country_id = $2
`

type GetOrganizationCountWithNameAndCountryParams struct {
	Name      string `json:"name"`
	CountryID int32  `json:"country_id"`
}

func (q *Queries) GetOrganizationCountWithNameAndCountry(ctx context.Context, arg GetOrganizationCountWithNameAndCountryParams) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationCountWithNameAndCountry, arg.Name, arg.CountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CountryID,
			&i.IsActive,
			&i.OrganizationType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrganization = `-- name: InsertOrganization :one
insert into
    organizations(name, country_id,organization_type)
values($1, $2,$3) returning id, name, country_id, is_active, organization_type
`

type InsertOrganizationParams struct {
	Name             string `json:"name"`
	CountryID        int32  `json:"country_id"`
	OrganizationType int32  `json:"organization_type"`
}

func (q *Queries) InsertOrganization(ctx context.Context, arg InsertOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, insertOrganization, arg.Name, arg.CountryID, arg.OrganizationType)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CountryID,
		&i.IsActive,
		&i.OrganizationType,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :exec
update organizations set name = $1, country_id = $2 where id = $3
`

type UpdateOrganizationParams struct {
	Name      string `json:"name"`
	CountryID int32  `json:"country_id"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, updateOrganization, arg.Name, arg.CountryID, arg.ID)
	return err
}

const updateOrganizationIsActive = `-- name: UpdateOrganizationIsActive :exec
update organizations set is_active=$1 where id =$2
`

type UpdateOrganizationIsActiveParams struct {
	IsActive bool  `json:"is_active"`
	ID       int32 `json:"id"`
}

func (q *Queries) UpdateOrganizationIsActive(ctx context.Context, arg UpdateOrganizationIsActiveParams) error {
	_, err := q.db.ExecContext(ctx, updateOrganizationIsActive, arg.IsActive, arg.ID)
	return err
}
