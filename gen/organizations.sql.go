// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: organizations.sql

package gen

import (
	"context"
)

const getAllOrganizations = `-- name: GetAllOrganizations :many

SELECT id, name, country_id from organizations
`

// regions.sql
func (q *Queries) GetAllOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(&i.ID, &i.Name, &i.CountryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneOrganization = `-- name: GetOneOrganization :one

SELECT id, name, country_id FROM organizations WHERE ID=$1
`

func (q *Queries) GetOneOrganization(ctx context.Context, id int32) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOneOrganization, id)
	var i Organization
	err := row.Scan(&i.ID, &i.Name, &i.CountryID)
	return i, err
}
