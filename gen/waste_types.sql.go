// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: waste_types.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const getAllWasteTypes = `-- name: GetAllWasteTypes :many

select waste_types.id, waste_types.name, waste_types.is_active, waste_types.parent_id, waste_types.created_at,uploads.path as file_path from waste_types 
left join uploads on uploads.item_id=waste_types.id and uploads.related_table='waste_types'
`

type GetAllWasteTypesRow struct {
	ID        int32          `json:"id"`
	Name      string         `json:"name"`
	IsActive  bool           `json:"is_active"`
	ParentID  sql.NullInt32  `json:"parent_id"`
	CreatedAt time.Time      `json:"created_at"`
	FilePath  sql.NullString `json:"file_path"`
}

// waste_types.sql
func (q *Queries) GetAllWasteTypes(ctx context.Context) ([]GetAllWasteTypesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllWasteTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllWasteTypesRow{}
	for rows.Next() {
		var i GetAllWasteTypesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.ParentID,
			&i.CreatedAt,
			&i.FilePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChildrenWasteTypes = `-- name: GetChildrenWasteTypes :many
select waste_types.id, waste_types.name, waste_types.is_active, waste_types.parent_id, waste_types.created_at,uploads.path as file_path from waste_types left join uploads on uploads.item_id=waste_types.id and uploads.related_table='waste_types' where waste_types.parent_id =$1
`

type GetChildrenWasteTypesRow struct {
	ID        int32          `json:"id"`
	Name      string         `json:"name"`
	IsActive  bool           `json:"is_active"`
	ParentID  sql.NullInt32  `json:"parent_id"`
	CreatedAt time.Time      `json:"created_at"`
	FilePath  sql.NullString `json:"file_path"`
}

func (q *Queries) GetChildrenWasteTypes(ctx context.Context, parentID sql.NullInt32) ([]GetChildrenWasteTypesRow, error) {
	rows, err := q.db.QueryContext(ctx, getChildrenWasteTypes, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChildrenWasteTypesRow{}
	for rows.Next() {
		var i GetChildrenWasteTypesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.ParentID,
			&i.CreatedAt,
			&i.FilePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMainWasteTypes = `-- name: GetMainWasteTypes :many
select waste_types.id, waste_types.name, waste_types.is_active, waste_types.parent_id, waste_types.created_at,uploads.path as file_path from waste_types left join uploads on uploads.item_id=waste_types.id and uploads.related_table='waste_types' where waste_types.parent_id is null
`

type GetMainWasteTypesRow struct {
	ID        int32          `json:"id"`
	Name      string         `json:"name"`
	IsActive  bool           `json:"is_active"`
	ParentID  sql.NullInt32  `json:"parent_id"`
	CreatedAt time.Time      `json:"created_at"`
	FilePath  sql.NullString `json:"file_path"`
}

func (q *Queries) GetMainWasteTypes(ctx context.Context) ([]GetMainWasteTypesRow, error) {
	rows, err := q.db.QueryContext(ctx, getMainWasteTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMainWasteTypesRow{}
	for rows.Next() {
		var i GetMainWasteTypesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.ParentID,
			&i.CreatedAt,
			&i.FilePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneWasteType = `-- name: GetOneWasteType :one
select waste_types.id, waste_types.name, waste_types.is_active, waste_types.parent_id, waste_types.created_at,uploads.path as file_path
from waste_types 
left join uploads on uploads.item_id=waste_types.id and uploads.related_table='waste_types' where waste_types.id=$1
`

type GetOneWasteTypeRow struct {
	ID        int32          `json:"id"`
	Name      string         `json:"name"`
	IsActive  bool           `json:"is_active"`
	ParentID  sql.NullInt32  `json:"parent_id"`
	CreatedAt time.Time      `json:"created_at"`
	FilePath  sql.NullString `json:"file_path"`
}

func (q *Queries) GetOneWasteType(ctx context.Context, id int32) (GetOneWasteTypeRow, error) {
	row := q.db.QueryRowContext(ctx, getOneWasteType, id)
	var i GetOneWasteTypeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.ParentID,
		&i.CreatedAt,
		&i.FilePath,
	)
	return i, err
}

const getUsersWasteType = `-- name: GetUsersWasteType :many
select waste_types.id, waste_types.name, waste_types.is_active, waste_types.parent_id, waste_types.created_at,uploads.path as file_path from waste_types left join uploads on uploads.item_id=waste_types.id and uploads.related_table='waste_types' where waste_types.is_active = true
`

type GetUsersWasteTypeRow struct {
	ID        int32          `json:"id"`
	Name      string         `json:"name"`
	IsActive  bool           `json:"is_active"`
	ParentID  sql.NullInt32  `json:"parent_id"`
	CreatedAt time.Time      `json:"created_at"`
	FilePath  sql.NullString `json:"file_path"`
}

func (q *Queries) GetUsersWasteType(ctx context.Context) ([]GetUsersWasteTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersWasteType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersWasteTypeRow{}
	for rows.Next() {
		var i GetUsersWasteTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.ParentID,
			&i.CreatedAt,
			&i.FilePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWasteType = `-- name: InsertWasteType :one
INSERT INTO waste_types (name,parent_id) VALUES ($1,$2) RETURNING id, name, is_active, parent_id, created_at
`

type InsertWasteTypeParams struct {
	Name     string        `json:"name"`
	ParentID sql.NullInt32 `json:"parent_id"`
}

func (q *Queries) InsertWasteType(ctx context.Context, arg InsertWasteTypeParams) (WasteType, error) {
	row := q.db.QueryRowContext(ctx, insertWasteType, arg.Name, arg.ParentID)
	var i WasteType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.ParentID,
		&i.CreatedAt,
	)
	return i, err
}

const updateWasteType = `-- name: UpdateWasteType :exec
update waste_types set name=$1,is_active=$2,parent_id=$3 where id=$4
`

type UpdateWasteTypeParams struct {
	Name     string        `json:"name"`
	IsActive bool          `json:"is_active"`
	ParentID sql.NullInt32 `json:"parent_id"`
	ID       int32         `json:"id"`
}

func (q *Queries) UpdateWasteType(ctx context.Context, arg UpdateWasteTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateWasteType,
		arg.Name,
		arg.IsActive,
		arg.ParentID,
		arg.ID,
	)
	return err
}
