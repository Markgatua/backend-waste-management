// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: waste_types.sql

package gen

import (
	"context"
)

const getAllWasteTypes = `-- name: GetAllWasteTypes :many

select id, name, is_active, category, created_at from waste_types
`

// waste_types.sql
func (q *Queries) GetAllWasteTypes(ctx context.Context) ([]WasteType, error) {
	rows, err := q.db.QueryContext(ctx, getAllWasteTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WasteType{}
	for rows.Next() {
		var i WasteType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneWasteType = `-- name: GetOneWasteType :one
select id, name, is_active, category, created_at from waste_types where id=$1
`

func (q *Queries) GetOneWasteType(ctx context.Context, id int32) (WasteType, error) {
	row := q.db.QueryRowContext(ctx, getOneWasteType, id)
	var i WasteType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersWasteType = `-- name: GetUsersWasteType :many
select id, name, is_active, category, created_at from waste_types where deleted_at is NULL
`

func (q *Queries) GetUsersWasteType(ctx context.Context) ([]WasteType, error) {
	rows, err := q.db.QueryContext(ctx, getUsersWasteType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WasteType{}
	for rows.Next() {
		var i WasteType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWasteType = `-- name: InsertWasteType :one
INSERT INTO waste_types (name,category) VALUES ($1,$2) RETURNING id, name, is_active, category, created_at
`

type InsertWasteTypeParams struct {
	Name     string `json:"name"`
	Category string `json:"category"`
}

func (q *Queries) InsertWasteType(ctx context.Context, arg InsertWasteTypeParams) (WasteType, error) {
	row := q.db.QueryRowContext(ctx, insertWasteType, arg.Name, arg.Category)
	var i WasteType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const updateWasteType = `-- name: UpdateWasteType :exec
update waste_types set name=$1, category=$2,is_active=$3 where id=$4
`

type UpdateWasteTypeParams struct {
	Name     string `json:"name"`
	Category string `json:"category"`
	IsActive bool   `json:"is_active"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateWasteType(ctx context.Context, arg UpdateWasteTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateWasteType,
		arg.Name,
		arg.Category,
		arg.IsActive,
		arg.ID,
	)
	return err
}
