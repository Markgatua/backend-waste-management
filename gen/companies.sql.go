// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: companies.sql

package gen

import (
	"context"
	"database/sql"
)

const getAllCompanies = `-- name: GetAllCompanies :many

select id, name, companytype, logo, location, has_regions, has_branches, is_active, created_at from companies
`

// companies.sql
func (q *Queries) GetAllCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getAllCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Companytype,
			&i.Logo,
			&i.Location,
			&i.HasRegions,
			&i.HasBranches,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: GetCompany :one
select id, name, companytype, logo, location, has_regions, has_branches, is_active, created_at from companies where id=$1
`

func (q *Queries) GetCompany(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Companytype,
		&i.Logo,
		&i.Location,
		&i.HasRegions,
		&i.HasBranches,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const insertCompany = `-- name: InsertCompany :one
INSERT INTO companies (name, companytype, logo, location, has_regions, has_branches) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, name, companytype, logo, location, has_regions, has_branches, is_active, created_at
`

type InsertCompanyParams struct {
	Name        string         `json:"name"`
	Companytype int32          `json:"companytype"`
	Logo        sql.NullString `json:"logo"`
	Location    sql.NullString `json:"location"`
	HasRegions  bool           `json:"has_regions"`
	HasBranches bool           `json:"has_branches"`
}

func (q *Queries) InsertCompany(ctx context.Context, arg InsertCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, insertCompany,
		arg.Name,
		arg.Companytype,
		arg.Logo,
		arg.Location,
		arg.HasRegions,
		arg.HasBranches,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Companytype,
		&i.Logo,
		&i.Location,
		&i.HasRegions,
		&i.HasBranches,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateCompanyData = `-- name: UpdateCompanyData :exec
update companies set name=$2,location=$3,logo=$4, has_regions=$5, has_branches=$6 where id=$1
`

type UpdateCompanyDataParams struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Location    sql.NullString `json:"location"`
	Logo        sql.NullString `json:"logo"`
	HasRegions  bool           `json:"has_regions"`
	HasBranches bool           `json:"has_branches"`
}

func (q *Queries) UpdateCompanyData(ctx context.Context, arg UpdateCompanyDataParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyData,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.Logo,
		arg.HasRegions,
		arg.HasBranches,
	)
	return err
}

const updateCompanyStatus = `-- name: UpdateCompanyStatus :exec
update companies set is_active=$2 where id=$1
`

type UpdateCompanyStatusParams struct {
	ID       int32 `json:"id"`
	IsActive bool  `json:"is_active"`
}

func (q *Queries) UpdateCompanyStatus(ctx context.Context, arg UpdateCompanyStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyStatus, arg.ID, arg.IsActive)
	return err
}
