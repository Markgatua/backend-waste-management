// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: companies.sql

package gen

import (
	"context"
)

const getAllCompanies = `-- name: GetAllCompanies :many

select id, name, company_type, organization_id, region, location, logo, is_active, created_at from companies
`

// companies.sql
func (q *Queries) GetAllCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getAllCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CompanyType,
			&i.OrganizationID,
			&i.Region,
			&i.Location,
			&i.Logo,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: GetCompany :one
select id, name, company_type, organization_id, region, location, logo, is_active, created_at from companies where id=$1
`

func (q *Queries) GetCompany(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CompanyType,
		&i.OrganizationID,
		&i.Region,
		&i.Location,
		&i.Logo,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateCompanyStatus = `-- name: UpdateCompanyStatus :exec
update companies set is_active=$2 where id=$1
`

type UpdateCompanyStatusParams struct {
	ID       int32 `json:"id"`
	IsActive bool  `json:"is_active"`
}

func (q *Queries) UpdateCompanyStatus(ctx context.Context, arg UpdateCompanyStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyStatus, arg.ID, arg.IsActive)
	return err
}
