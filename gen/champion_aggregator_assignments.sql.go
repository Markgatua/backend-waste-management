// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: champion_aggregator_assignments.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const assignChampionToCollector = `-- name: AssignChampionToCollector :one
insert into champion_aggregator_assignments( champion_id,collector_id ) values ($1, $2) returning id, champion_id, collector_id, created_at
`

type AssignChampionToCollectorParams struct {
	ChampionID  sql.NullInt32 `json:"champion_id"`
	CollectorID sql.NullInt32 `json:"collector_id"`
}

func (q *Queries) AssignChampionToCollector(ctx context.Context, arg AssignChampionToCollectorParams) (ChampionAggregatorAssignment, error) {
	row := q.db.QueryRowContext(ctx, assignChampionToCollector, arg.ChampionID, arg.CollectorID)
	var i ChampionAggregatorAssignment
	err := row.Scan(
		&i.ID,
		&i.ChampionID,
		&i.CollectorID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChampionCollector = `-- name: DeleteChampionCollector :exec
delete from champion_aggregator_assignments where id=$1
`

func (q *Queries) DeleteChampionCollector(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteChampionCollector, id)
	return err
}

const getAllChampionCollectorsAssignments = `-- name: GetAllChampionCollectorsAssignments :many

SELECT 
    champion_aggregator_assignments.id, champion_aggregator_assignments.champion_id, champion_aggregator_assignments.collector_id, champion_aggregator_assignments.created_at,
    champion.name AS aggregator_name,
    collector.name AS champion_name
FROM 
    champion_aggregator_assignments
LEFT JOIN 
    companies AS champion ON champion.id = champion_aggregator_assignments.champion_id
LEFT JOIN 
    companies AS collector ON collector.id = champion_aggregator_assignments.collector_id
`

type GetAllChampionCollectorsAssignmentsRow struct {
	ID             int32          `json:"id"`
	ChampionID     sql.NullInt32  `json:"champion_id"`
	CollectorID    sql.NullInt32  `json:"collector_id"`
	CreatedAt      time.Time      `json:"created_at"`
	AggregatorName sql.NullString `json:"aggregator_name"`
	ChampionName   sql.NullString `json:"champion_name"`
}

// champion_aggregator_assignments.sql
func (q *Queries) GetAllChampionCollectorsAssignments(ctx context.Context) ([]GetAllChampionCollectorsAssignmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllChampionCollectorsAssignments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllChampionCollectorsAssignmentsRow{}
	for rows.Next() {
		var i GetAllChampionCollectorsAssignmentsRow
		if err := rows.Scan(
			&i.ID,
			&i.ChampionID,
			&i.CollectorID,
			&i.CreatedAt,
			&i.AggregatorName,
			&i.ChampionName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllChampionsForACollector = `-- name: GetAllChampionsForACollector :many
SELECT 
    champion_aggregator_assignments.id, champion_aggregator_assignments.champion_id, champion_aggregator_assignments.collector_id, champion_aggregator_assignments.created_at,
    champion.name AS aggregator_name,
    collector.name AS champion_name
FROM 
    champion_aggregator_assignments
LEFT JOIN 
    companies AS champion ON champion.id = champion_aggregator_assignments.champion_id
LEFT JOIN 
    companies AS collector ON collector.id = champion_aggregator_assignments.collector_id
WHERE collector_id = $1
`

type GetAllChampionsForACollectorRow struct {
	ID             int32          `json:"id"`
	ChampionID     sql.NullInt32  `json:"champion_id"`
	CollectorID    sql.NullInt32  `json:"collector_id"`
	CreatedAt      time.Time      `json:"created_at"`
	AggregatorName sql.NullString `json:"aggregator_name"`
	ChampionName   sql.NullString `json:"champion_name"`
}

func (q *Queries) GetAllChampionsForACollector(ctx context.Context, collectorID sql.NullInt32) ([]GetAllChampionsForACollectorRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllChampionsForACollector, collectorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllChampionsForACollectorRow{}
	for rows.Next() {
		var i GetAllChampionsForACollectorRow
		if err := rows.Scan(
			&i.ID,
			&i.ChampionID,
			&i.CollectorID,
			&i.CreatedAt,
			&i.AggregatorName,
			&i.ChampionName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssignedCollectorsToGreenChampion = `-- name: GetAssignedCollectorsToGreenChampion :many
select id, champion_id, collector_id, created_at from champion_aggregator_assignments where champion_id=$1
`

func (q *Queries) GetAssignedCollectorsToGreenChampion(ctx context.Context, championID sql.NullInt32) ([]ChampionAggregatorAssignment, error) {
	rows, err := q.db.QueryContext(ctx, getAssignedCollectorsToGreenChampion, championID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChampionAggregatorAssignment{}
	for rows.Next() {
		var i ChampionAggregatorAssignment
		if err := rows.Scan(
			&i.ID,
			&i.ChampionID,
			&i.CollectorID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTheCollectorForAChampion = `-- name: GetTheCollectorForAChampion :one
SELECT 
    champion_aggregator_assignments.id, champion_aggregator_assignments.champion_id, champion_aggregator_assignments.collector_id, champion_aggregator_assignments.created_at,
    champion.name AS aggregator_name,
    collector.name AS champion_name
FROM 
    champion_aggregator_assignments
LEFT JOIN 
    companies AS champion ON champion.id = champion_aggregator_assignments.champion_id
LEFT JOIN 
    companies AS collector ON collector.id = champion_aggregator_assignments.collector_id
WHERE champion_id = $1
`

type GetTheCollectorForAChampionRow struct {
	ID             int32          `json:"id"`
	ChampionID     sql.NullInt32  `json:"champion_id"`
	CollectorID    sql.NullInt32  `json:"collector_id"`
	CreatedAt      time.Time      `json:"created_at"`
	AggregatorName sql.NullString `json:"aggregator_name"`
	ChampionName   sql.NullString `json:"champion_name"`
}

func (q *Queries) GetTheCollectorForAChampion(ctx context.Context, championID sql.NullInt32) (GetTheCollectorForAChampionRow, error) {
	row := q.db.QueryRowContext(ctx, getTheCollectorForAChampion, championID)
	var i GetTheCollectorForAChampionRow
	err := row.Scan(
		&i.ID,
		&i.ChampionID,
		&i.CollectorID,
		&i.CreatedAt,
		&i.AggregatorName,
		&i.ChampionName,
	)
	return i, err
}

const updateChampionCollector = `-- name: UpdateChampionCollector :exec
update champion_aggregator_assignments
set
    collector_id = $1
where id = $2
`

type UpdateChampionCollectorParams struct {
	CollectorID sql.NullInt32 `json:"collector_id"`
	ID          int32         `json:"id"`
}

func (q *Queries) UpdateChampionCollector(ctx context.Context, arg UpdateChampionCollectorParams) error {
	_, err := q.db.ExecContext(ctx, updateChampionCollector, arg.CollectorID, arg.ID)
	return err
}
