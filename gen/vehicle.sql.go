// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: vehicle.sql

package gen

import (
	"context"
)

const createVehicleTypes = `-- name: CreateVehicleTypes :one
INSERT INTO vehicle_types (id,name,max_vehicle_weight,max_vehicle_height,description) VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    ) ON CONFLICT(id) do update set name=EXCLUDED.name,max_vehicle_weight=EXCLUDED.max_vehicle_weight,max_vehicle_height=EXCLUDED.max_vehicle_height,description=EXCLUDED.description returning id, name, max_vehicle_weight, max_vehicle_height, description
`

type CreateVehicleTypesParams struct {
	ID               int32   `json:"id"`
	Name             string  `json:"name"`
	MaxVehicleWeight float64 `json:"max_vehicle_weight"`
	MaxVehicleHeight float64 `json:"max_vehicle_height"`
	Description      string  `json:"description"`
}

func (q *Queries) CreateVehicleTypes(ctx context.Context, arg CreateVehicleTypesParams) (VehicleType, error) {
	row := q.db.QueryRowContext(ctx, createVehicleTypes,
		arg.ID,
		arg.Name,
		arg.MaxVehicleWeight,
		arg.MaxVehicleHeight,
		arg.Description,
	)
	var i VehicleType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MaxVehicleWeight,
		&i.MaxVehicleHeight,
		&i.Description,
	)
	return i, err
}
