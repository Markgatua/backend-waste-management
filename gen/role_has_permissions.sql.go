// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role_has_permissions.sql

package gen

import (
	"context"
	"database/sql"
)

const getRolePermissions = `-- name: GetRolePermissions :many


SELECT permission_id, role_id FROM role_has_permissions WHERE role_id = $1
`

// role_has_permissions.sql
func (q *Queries) GetRolePermissions(ctx context.Context, roleID sql.NullInt32) ([]RoleHasPermission, error) {
	rows, err := q.db.QueryContext(ctx, getRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RoleHasPermission{}
	for rows.Next() {
		var i RoleHasPermission
		if err := rows.Scan(&i.PermissionID, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
