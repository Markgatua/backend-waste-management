// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: wastegroups.sql

package gen

import (
	"context"
)

const getAllWasteGroups = `-- name: GetAllWasteGroups :many

select id, name, category, created_at from waste_groups
`

// waste_groups.sql
func (q *Queries) GetAllWasteGroups(ctx context.Context) ([]WasteGroup, error) {
	rows, err := q.db.QueryContext(ctx, getAllWasteGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WasteGroup{}
	for rows.Next() {
		var i WasteGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneWasteGroup = `-- name: GetOneWasteGroup :one
select id, name, category, created_at from waste_groups where id=$1
`

func (q *Queries) GetOneWasteGroup(ctx context.Context, id int32) (WasteGroup, error) {
	row := q.db.QueryRowContext(ctx, getOneWasteGroup, id)
	var i WasteGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const insertWasteGroup = `-- name: InsertWasteGroup :one
INSERT INTO waste_groups (name,category) VALUES ($1,$2) RETURNING id, name, category, created_at
`

type InsertWasteGroupParams struct {
	Name     string `json:"name"`
	Category string `json:"category"`
}

func (q *Queries) InsertWasteGroup(ctx context.Context, arg InsertWasteGroupParams) (WasteGroup, error) {
	row := q.db.QueryRowContext(ctx, insertWasteGroup, arg.Name, arg.Category)
	var i WasteGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const updateWasteGroup = `-- name: UpdateWasteGroup :exec
update waste_groups set name=$2, category=$3 where id=$1
`

type UpdateWasteGroupParams struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	Category string `json:"category"`
}

func (q *Queries) UpdateWasteGroup(ctx context.Context, arg UpdateWasteGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateWasteGroup, arg.ID, arg.Name, arg.Category)
	return err
}
