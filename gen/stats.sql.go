// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: stats.sql

package gen

import (
	"context"
)

const getBranchCount = `-- name: GetBranchCount :many
SELECT
    companies.company_type,
    SUM(companies.id) AS total
FROM
    companies
GROUP BY
    companies.company_type,companies.id
`

type GetBranchCountRow struct {
	CompanyType int32 `json:"company_type"`
	Total       int64 `json:"total"`
}

func (q *Queries) GetBranchCount(ctx context.Context) ([]GetBranchCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getBranchCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBranchCountRow{}
	for rows.Next() {
		var i GetBranchCountRow
		if err := rows.Scan(&i.CompanyType, &i.Total); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationCount = `-- name: GetOrganizationCount :many
SELECT
    organizations.organization_type,
    SUM(organizations.id) AS total
FROM
    organizations
GROUP BY
    organizations.organization_type,organizations.id
`

type GetOrganizationCountRow struct {
	OrganizationType int32 `json:"organization_type"`
	Total            int64 `json:"total"`
}

func (q *Queries) GetOrganizationCount(ctx context.Context) ([]GetOrganizationCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrganizationCountRow{}
	for rows.Next() {
		var i GetOrganizationCountRow
		if err := rows.Scan(&i.OrganizationType, &i.Total); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
