// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: main_organization.sql

package gen

import (
	"context"
)

const getMainOrganization = `-- name: GetMainOrganization :many
select id, organization_id, name, tag_line, about_us, logo_path, app_appstore_link, app_google_playstore_link, website_url, city, state, zip, country, created_at, updated_at from main_organization where organization_id=$1
`

func (q *Queries) GetMainOrganization(ctx context.Context, organizationID string) ([]MainOrganization, error) {
	rows, err := q.db.QueryContext(ctx, getMainOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MainOrganization{}
	for rows.Next() {
		var i MainOrganization
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.Name,
			&i.TagLine,
			&i.AboutUs,
			&i.LogoPath,
			&i.AppAppstoreLink,
			&i.AppGooglePlaystoreLink,
			&i.WebsiteUrl,
			&i.City,
			&i.State,
			&i.Zip,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMainOrganization = `-- name: InsertMainOrganization :exec
insert into main_organization (name,organization_id,tag_line,about_us,logo_path,website_url,city,state,zip,country,app_appstore_link,app_google_playstore_link) VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
`

type InsertMainOrganizationParams struct {
	Name                   string `json:"name"`
	OrganizationID         string `json:"organization_id"`
	TagLine                string `json:"tag_line"`
	AboutUs                string `json:"about_us"`
	LogoPath               string `json:"logo_path"`
	WebsiteUrl             string `json:"website_url"`
	City                   string `json:"city"`
	State                  string `json:"state"`
	Zip                    string `json:"zip"`
	Country                string `json:"country"`
	AppAppstoreLink        string `json:"app_appstore_link"`
	AppGooglePlaystoreLink string `json:"app_google_playstore_link"`
}

func (q *Queries) InsertMainOrganization(ctx context.Context, arg InsertMainOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, insertMainOrganization,
		arg.Name,
		arg.OrganizationID,
		arg.TagLine,
		arg.AboutUs,
		arg.LogoPath,
		arg.WebsiteUrl,
		arg.City,
		arg.State,
		arg.Zip,
		arg.Country,
		arg.AppAppstoreLink,
		arg.AppGooglePlaystoreLink,
	)
	return err
}

const updateMainOrganizationProfile = `-- name: UpdateMainOrganizationProfile :exec

update main_organization set name=$2, tag_line=$3, about_us=$4, logo_path=$5, website_url=$6, city=$7,state=$8,zip=$9,country=$10,app_appstore_link=$11,app_google_playstore_link=$12 where organization_id=$1
`

type UpdateMainOrganizationProfileParams struct {
	OrganizationID         string `json:"organization_id"`
	Name                   string `json:"name"`
	TagLine                string `json:"tag_line"`
	AboutUs                string `json:"about_us"`
	LogoPath               string `json:"logo_path"`
	WebsiteUrl             string `json:"website_url"`
	City                   string `json:"city"`
	State                  string `json:"state"`
	Zip                    string `json:"zip"`
	Country                string `json:"country"`
	AppAppstoreLink        string `json:"app_appstore_link"`
	AppGooglePlaystoreLink string `json:"app_google_playstore_link"`
}

// ttnm_organization.sql
func (q *Queries) UpdateMainOrganizationProfile(ctx context.Context, arg UpdateMainOrganizationProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateMainOrganizationProfile,
		arg.OrganizationID,
		arg.Name,
		arg.TagLine,
		arg.AboutUs,
		arg.LogoPath,
		arg.WebsiteUrl,
		arg.City,
		arg.State,
		arg.Zip,
		arg.Country,
		arg.AppAppstoreLink,
		arg.AppGooglePlaystoreLink,
	)
	return err
}
